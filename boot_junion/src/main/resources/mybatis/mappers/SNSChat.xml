<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.boot.DAO.SNSChatDAO">
    
    <select id="selectAllRooms" resultType="com.boot.DTO.SNSRoom">
		WITH recent_messages AS (
		    SELECT t1.chat_id, 
		           t1.sender_id, 
		           t1.receiver_id, 
		           t1.chatRoom_id, 
		           t1.message, 
		           t1.timestamp
		    FROM chat_tb t1
		    JOIN (
		        SELECT chatRoom_id, MAX(chat_id) AS latest_chat_id
		        FROM chat_tb
		        GROUP BY chatRoom_id
		    ) t2
		    ON t1.chatRoom_id = t2.chatRoom_id
		    AND t1.chat_id = t2.latest_chat_id
		),
		related_users AS (
		    SELECT DISTINCT
				   chatRoom_id,
		           CASE 
		               WHEN sender_id = #{senderId} THEN receiver_id
		               ELSE sender_id
		           END AS other_id
		    FROM chatroom_tb
		    WHERE sender_id = #{senderId} OR receiver_id = #{senderId}
		),
	    unread_counts AS (
	        SELECT chatRoom_id, COUNT(*) AS unread_count
	        FROM message_status_tb ms
	        JOIN chat_tb ct ON ms.chat_id = ct.chat_id
	        WHERE ms.user_id = #{senderId} AND ms.is_read = FALSE
	        GROUP BY chatRoom_id
    	)
		SELECT u.user_name,
			   u.user_email,
			   rm.chatRoom_id,
		       rm.sender_id,
		       rm.message,
		       rm.timestamp,
		       COALESCE(uc.unread_count, 0) AS unread_count
		FROM user_tb u
		JOIN related_users ru ON u.user_email = ru.other_id
		JOIN recent_messages rm ON rm.chatRoom_id = ru.chatRoom_id
		LEFT JOIN unread_counts uc ON rm.chatRoom_id = uc.chatRoom_id
		WHERE rm.chatRoom_id IN (
		    SELECT DISTINCT chatRoom_id 
		    FROM chatroom_tb 
		    WHERE sender_id = #{senderId} OR receiver_id = #{senderId}
		)
		ORDER BY timestamp desc
    </select>
    
    <select id="checkRooms" resultType="int">
        SELECT count(*) 
        FROM chatRoom_tb
        WHERE (sender_id = #{senderId} AND receiver_id = #{receiverId})
   		   OR (sender_id = #{receiverId} AND receiver_id = #{senderId})
    </select>
    
    <select id="getRooms" resultType="int">
        SELECT chatRoom_id
        FROM chatRoom_tb
        WHERE (sender_id = #{senderId} AND receiver_id = #{receiverId})
   		   OR (sender_id = #{receiverId} AND receiver_id = #{senderId})
    </select>

    <insert id="insertRoom" parameterType="com.boot.DTO.SNSRoom">
        INSERT INTO chatRoom_tb (sender_id, receiver_id) VALUES (#{senderId}, #{receiverId})
    </insert>
    

    <select id="selectMessagesByRoomId" parameterType="int" resultType="com.boot.DTO.SNSChat">
        SELECT * FROM chat_tb WHERE chatRoom_id = #{roomId} ORDER BY timestamp
    </select>

    <insert id="insertMessage" parameterType="com.boot.DTO.SNSChat">
    	<!-- 메시지 삽입 -->
        INSERT INTO chat_tb (sender_id, receiver_id, chatRoom_id, message, timestamp)
        VALUES (#{sender_id}, #{receiver_id}, #{chatRoom_id}, #{message}, #{timestamp})
    </insert>

    <insert id="insertMessageStatus" parameterType="com.boot.DTO.SNSChat">
        <!-- 읽지 않은 상태 삽입 -->
        INSERT INTO message_status_tb (chat_id, user_id, is_read)
    	VALUES (LAST_INSERT_ID(), #{receiver_id}, FALSE)
    </insert>

    <select id="getUserName" resultType="String">
        SELECT user_name FROM user_tb WHERE user_email = #{receiver_id}
    </select>
    
    <update id="markMessageAsRead">
	    UPDATE message_status_tb
	    SET is_read = TRUE
	    WHERE chat_id IN (
	        SELECT chat_id FROM chat_tb WHERE chatRoom_id = #{chatRoom_id}
	    ) AND user_id = #{user_id}
	</update>
    
</mapper>










