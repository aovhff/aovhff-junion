<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.boot.DAO.CardPageDAO">


<!--career 조회 : 필터링 기능을 위함 -->
    <select id="getCareerList" resultType="String"> 
    	select career_name from career
    </select>

<!--stack 조회 : 필터링 기능을 위함 -->
    <select id="getStackList" resultType="String"> 
    	select stack_name from stack 
    </select>
	
<!--	지역 이름 조회 : 필터링을 위함 -->
	<select id="getLocationList" resultType="String">
		select location_name from location
	</select>
		
<!--2024-08-01 지수 (공고 목록 사진 불러오기)-->
	<select id="cardPageFileList" resultType="com.boot.DTO.ComNoticeAttachDTO">
		select uuid, uploadPath, fileName, image, notice_num
			from notice_attach where notice_num=#{notice_num}
    </select>
    
    
    
    
    
    
    
    
    
    <!-- 0809 연주 메인 채용 채용공고 리스트 -->
    
    
    
    <select id="cardPageList" resultType="com.boot.DTO.ComNoticeDTO">
		<!-- 	페이징을 위한 쿼리 -->
	   select row_noticeNum, notice_num, notice_title, com_name, notice_area1, notice_area2, notice_career, notice_jobInfo,notice_endDate,notice_hit,scrap_count,stack
		FROM ( select row_noticeNum, notice_num, notice_title, com_name, notice_area1, notice_area2, notice_career, notice_jobInfo,notice_endDate,notice_hit,scrap_count,stack
				FROM (  select row_number() over( ) as row_noticeNum , nt.notice_num as notice_num, nt.notice_title as notice_title, ct.com_name as com_name
						, notice_area1 , notice_area2, notice_career, notice_jobInfo, notice_endDate, notice_hit, scrap_count, stack
						FROM notice_tb nt
						left outer join (select com_name, com_email 
											from com_tb group by com_email) ct on nt.com_email= ct.com_email
						left outer join (select notice_num, COUNT(notice_num) AS scrap_count 
											from NOTICE_SCRAP group by notice_num) ns on nt.notice_num = ns.notice_num 
						left outer join (select notice_num, GROUP_CONCAT(stack SEPARATOR ', ') as stack 
											from notice_stack group by notice_num) nk  on nt.notice_num = nk.notice_num
						<![CDATA[
		                where notice_endDate >= CURDATE()
		                ]]>
		                and (ct.com_name like concat ('%', IFNULL(#{std.keyword}, ''), '%') or nt.notice_title like concat ('%', IFNULL(#{std.keyword}, ''), '%') or notice_jobInfo like concat ('%', IFNULL(#{std.keyword}, ''), '%'))
			           	and notice_career like concat ('%', IFNULL(#{std.careerType}, ''), '%') 
						and nk.stack like BINARY CONCAT ('%', IFNULL(#{std.stackType}, ''), '%') 
						and notice_area1 like concat ('%', IFNULL(#{std.locationType}, ''), '%') 
						 <include refid="orderType"/>
					  	<![CDATA[
				            ) a 
				         where row_noticeNum<= (#{std.pageNum} * #{std.amount}) 
				         )aa 
				         where row_noticeNum > (#{std.pageNum}-1)* #{std.amount}
				   		]]>
			           
	</select>
	
	
    <!--	총 진행중인 공고 수를 가져오는 쿼리-->
	<select id="getTotalCount" resultType="int"> 
		select count(*)
		FROM notice_tb nt
		left outer join (select com_name, com_email 
							from com_tb group by com_email) ct on nt.com_email= ct.com_email
		left outer join (select notice_num, COUNT(notice_num) AS scrap_count 
							from NOTICE_SCRAP group by notice_num) ns on nt.notice_num = ns.notice_num 
		left outer join (select notice_num, GROUP_CONCAT(stack SEPARATOR ', ') as stack 
							from notice_stack group by notice_num) nk  on nt.notice_num = nk.notice_num
		<![CDATA[
		where notice_endDate >= CURDATE()
		]]>
		and (ct.com_name like concat ('%', IFNULL(#{keyword}, ''), '%') or nt.notice_title like concat ('%', IFNULL(#{keyword}, ''), '%') or notice_jobInfo like concat ('%', IFNULL(#{keyword}, ''), '%'))
		and notice_career like concat ('%', IFNULL(#{careerType}, ''), '%') 
		and nk.stack like BINARY CONCAT ('%', IFNULL(#{stackType}, ''), '%') 
		and notice_area1 like concat ('%', IFNULL(#{locationType}, ''), '%') 
		<include refid="orderType"/>
        
        
	</select>
    
    <!--  정렬 로직: 마감임박순, 추천순, 최신순, 조회순 공고 리스트검색  -->
	<sql id="orderType">
      <if test="(orderType == 'latest' || orderType == null)">  <!-- 최신순  -->
        order by nt.notice_num desc
      </if>
      <if test="(orderType == 'scrap')"><!-- 추천순  -->
        order by scrap_count desc
      </if>
      <if test='(orderType == "view")'><!-- 조회순  -->
         order by notice_hit desc
      </if>
      <if test='(orderType == "urgent")'><!-- 마감임박순  -->
<!--        order by notice_endDate desc-->
<!--	24.08.11 하진 : 최신순으로 정렬되는 조건이라 asc로 수정함-->
        order by notice_endDate asc
      </if>
   </sql>
      
   
   
    


</mapper>


